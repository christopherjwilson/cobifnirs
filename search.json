[{"path":"https://christopherjwilson.github.io/cobifnirs/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"License","title":"License","text":"Attribution 4.0 International ======================================================================= Creative Commons Corporation (“Creative Commons”) law firm provide legal services legal advice. Distribution Creative Commons public licenses create lawyer-client relationship. Creative Commons makes licenses related information available “-” basis. Creative Commons gives warranties regarding licenses, material licensed terms conditions, related information. Creative Commons disclaims liability damages resulting use fullest extent possible. Using Creative Commons Public Licenses Creative Commons public licenses provide standard set terms conditions creators rights holders may use share original works authorship material subject copyright certain rights specified public license . following considerations informational purposes , exhaustive, form part licenses. ======================================================================= Creative Commons Attribution 4.0 International Public License exercising Licensed Rights (defined ), accept agree bound terms conditions Creative Commons Attribution 4.0 International Public License (“Public License”). extent Public License may interpreted contract, granted Licensed Rights consideration acceptance terms conditions, Licensor grants rights consideration benefits Licensor receives making Licensed Material available terms conditions. Section 1 – Definitions. Adapted Material means material subject Copyright Similar Rights derived based upon Licensed Material Licensed Material translated, altered, arranged, transformed, otherwise modified manner requiring permission Copyright Similar Rights held Licensor. purposes Public License, Licensed Material musical work, performance, sound recording, Adapted Material always produced Licensed Material synched timed relation moving image. Adapter’s License means license apply Copyright Similar Rights contributions Adapted Material accordance terms conditions Public License. Copyright Similar Rights means copyright /similar rights closely related copyright including, without limitation, performance, broadcast, sound recording, Sui Generis Database Rights, without regard rights labeled categorized. purposes Public License, rights specified Section 2(b)(1)-(2) Copyright Similar Rights. Effective Technological Measures means measures , absence proper authority, may circumvented laws fulfilling obligations Article 11 WIPO Copyright Treaty adopted December 20, 1996, /similar international agreements. Exceptions Limitations means fair use, fair dealing, /exception limitation Copyright Similar Rights applies use Licensed Material. Licensed Material means artistic literary work, database, material Licensor applied Public License. Licensed Rights means rights granted subject terms conditions Public License, limited Copyright Similar Rights apply use Licensed Material Licensor authority license. Licensor means individual(s) entity(ies) granting rights Public License. Share means provide material public means process requires permission Licensed Rights, reproduction, public display, public performance, distribution, dissemination, communication, importation, make material available public including ways members public may access material place time individually chosen . Sui Generis Database Rights means rights copyright resulting Directive 96/9/EC European Parliament Council 11 March 1996 legal protection databases, amended /succeeded, well essentially equivalent rights anywhere world. means individual entity exercising Licensed Rights Public License. corresponding meaning. Section 2 – Scope. License grant. Subject terms conditions Public License, Licensor hereby grants worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license exercise Licensed Rights Licensed Material : reproduce Share Licensed Material, whole part; produce, reproduce, Share Adapted Material. Exceptions Limitations. avoidance doubt, Exceptions Limitations apply use, Public License apply, need comply terms conditions. Term. term Public License specified Section 6(). Media formats; technical modifications allowed. Licensor authorizes exercise Licensed Rights media formats whether now known hereafter created, make technical modifications necessary . Licensor waives /agrees assert right authority forbid making technical modifications necessary exercise Licensed Rights, including technical modifications necessary circumvent Effective Technological Measures. purposes Public License, simply making modifications authorized Section 2() never produces Adapted Material. Downstream recipients. Offer Licensor – Licensed Material. Every recipient Licensed Material automatically receives offer Licensor exercise Licensed Rights terms conditions Public License. downstream restrictions. may offer impose additional different terms conditions , apply Effective Technological Measures , Licensed Material restricts exercise Licensed Rights recipient Licensed Material. endorsement. Nothing Public License constitutes may construed permission assert imply , use Licensed Material , connected , sponsored, endorsed, granted official status , Licensor others designated receive attribution provided Section 3()(1)()(). rights. Moral rights, right integrity, licensed Public License, publicity, privacy, /similar personality rights; however, extent possible, Licensor waives /agrees assert rights held Licensor limited extent necessary allow exercise Licensed Rights, otherwise. Patent trademark rights licensed Public License. extent possible, Licensor waives right collect royalties exercise Licensed Rights, whether directly collecting society voluntary waivable statutory compulsory licensing scheme. cases Licensor expressly reserves right collect royalties. Section 3 – License Conditions. exercise Licensed Rights expressly made subject following conditions. Attribution. Share Licensed Material (including modified form), must: retain following supplied Licensor Licensed Material: identification creator(s) Licensed Material others designated receive attribution, reasonable manner requested Licensor (including pseudonym designated); copyright notice; notice refers Public License; notice refers disclaimer warranties; URI hyperlink Licensed Material extent reasonably practicable; indicate modified Licensed Material retain indication previous modifications; indicate Licensed Material licensed Public License, include text , URI hyperlink , Public License. may satisfy conditions Section 3()(1) reasonable manner based medium, means, context Share Licensed Material. example, may reasonable satisfy conditions providing URI hyperlink resource includes required information. requested Licensor, must remove information required Section 3()(1)() extent reasonably practicable. Share Adapted Material produce, Adapter’s License apply must prevent recipients Adapted Material complying Public License. Section 4 – Sui Generis Database Rights. Licensed Rights include Sui Generis Database Rights apply use Licensed Material: avoidance doubt, Section 2()(1) grants right extract, reuse, reproduce, Share substantial portion contents database; include substantial portion database contents database Sui Generis Database Rights, database Sui Generis Database Rights (individual contents) Adapted Material; must comply conditions Section 3() Share substantial portion contents database. avoidance doubt, Section 4 supplements replace obligations Public License Licensed Rights include Copyright Similar Rights. Section 5 – Disclaimer Warranties Limitation Liability. UNLESS OTHERWISE SEPARATELY UNDERTAKEN LICENSOR, EXTENT POSSIBLE, LICENSOR OFFERS LICENSED MATERIAL --AVAILABLE, MAKES REPRESENTATIONS WARRANTIES KIND CONCERNING LICENSED MATERIAL, WHETHER EXPRESS, IMPLIED, STATUTORY, . INCLUDES, WITHOUT LIMITATION, WARRANTIES TITLE, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE, NON-INFRINGEMENT, ABSENCE LATENT DEFECTS, ACCURACY, PRESENCE ABSENCE ERRORS, WHETHER KNOWN DISCOVERABLE. DISCLAIMERS WARRANTIES ALLOWED FULL PART, DISCLAIMER MAY APPLY . EXTENT POSSIBLE, EVENT LICENSOR LIABLE LEGAL THEORY (INCLUDING, WITHOUT LIMITATION, NEGLIGENCE) OTHERWISE DIRECT, SPECIAL, INDIRECT, INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, LOSSES, COSTS, EXPENSES, DAMAGES ARISING PUBLIC LICENSE USE LICENSED MATERIAL, EVEN LICENSOR ADVISED POSSIBILITY LOSSES, COSTS, EXPENSES, DAMAGES. LIMITATION LIABILITY ALLOWED FULL PART, LIMITATION MAY APPLY . disclaimer warranties limitation liability provided shall interpreted manner , extent possible, closely approximates absolute disclaimer waiver liability. Section 6 – Term Termination. Public License applies term Copyright Similar Rights licensed . However, fail comply Public License, rights Public License terminate automatically. right use Licensed Material terminated Section 6(), reinstates: automatically date violation cured, provided cured within 30 days discovery violation; upon express reinstatement Licensor. avoidance doubt, Section 6(b) affect right Licensor may seek remedies violations Public License. avoidance doubt, Licensor may also offer Licensed Material separate terms conditions stop distributing Licensed Material time; however, terminate Public License. Sections 1, 5, 6, 7, 8 survive termination Public License. Section 7 – Terms Conditions. Licensor shall bound additional different terms conditions communicated unless expressly agreed. arrangements, understandings, agreements regarding Licensed Material stated herein separate independent terms conditions Public License. Section 8 – Interpretation. avoidance doubt, Public License , shall interpreted , reduce, limit, restrict, impose conditions use Licensed Material lawfully made without permission Public License. extent possible, provision Public License deemed unenforceable, shall automatically reformed minimum extent necessary make enforceable. provision reformed, shall severed Public License without affecting enforceability remaining terms conditions. term condition Public License waived failure comply consented unless expressly agreed Licensor. Nothing Public License constitutes may interpreted limitation upon, waiver , privileges immunities apply Licensor , including legal processes jurisdiction authority. ======================================================================= Creative Commons party public licenses. Notwithstanding, Creative Commons may elect apply one public licenses material publishes instances considered “Licensor.” text Creative Commons public licenses dedicated public domain CC0 Public Domain Dedication. Except limited purpose indicating material shared Creative Commons public license otherwise permitted Creative Commons policies published creativecommons.org/policies, Creative Commons authorize use trademark “Creative Commons” trademark logo Creative Commons without prior written consent including, without limitation, connection unauthorized modifications public licenses arrangements, understandings, agreements concerning use licensed material. avoidance doubt, paragraph form part public licenses. Creative Commons may contacted creativecommons.org.","code":"Considerations for licensors: Our public licenses are  intended for use by those authorized to give the public  permission to use material in ways otherwise restricted by  copyright and certain other rights. Our licenses are  irrevocable. Licensors should read and understand the terms  and conditions of the license they choose before applying it.  Licensors should also secure all rights necessary before  applying our licenses so that the public can reuse the  material as expected. Licensors should clearly mark any  material not subject to the license. This includes other CC-  licensed material, or material used under an exception or  limitation to copyright. More considerations for licensors: wiki.creativecommons.org/Considerations_for_licensors   Considerations for the public: By using one of our public  licenses, a licensor grants the public permission to use the  licensed material under specified terms and conditions. If  the licensor's permission is not necessary for any reason--for  example, because of any applicable exception or limitation to  copyright--then that use is not regulated by the license. Our  licenses grant only permissions under copyright and certain  other rights that a licensor has authority to grant. Use of  the licensed material may still be restricted for other  reasons, including because others have copyright or other  rights in the material. A licensor may make special requests,  such as asking that all changes be marked or described.  Although not required by our licenses, you are encouraged to  respect those requests where reasonable. More considerations  for the public:  wiki.creativecommons.org/Considerations_for_licensees"},{"path":"https://christopherjwilson.github.io/cobifnirs/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Christopher J Wilson. Author, maintainer.","code":""},{"path":"https://christopherjwilson.github.io/cobifnirs/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wilson CJ (2024). cobifnirs: Import Process fNIRS Data COBI Studio R. R package version 0.0.0.9000, https://christopherjwilson.github.io/cobifnirs/, https://github.com/christopherjwilson/cobifnirs.","code":"@Manual{,   title = {cobifnirs: Import And Process fNIRS Data from COBI Studio in R},   author = {Christopher J Wilson},   year = {2024},   note = {R package version 0.0.0.9000, https://christopherjwilson.github.io/cobifnirs/},   url = {https://github.com/christopherjwilson/cobifnirs}, }"},{"path":"https://christopherjwilson.github.io/cobifnirs/index.html","id":"cobi-fnirs","dir":"","previous_headings":"","what":"Import And Process fNIRS Data from COBI Studio in R","title":"Import And Process fNIRS Data from COBI Studio in R","text":"importing working fNIRS data COBI Studio R.","code":""},{"path":"https://christopherjwilson.github.io/cobifnirs/index.html","id":"current-status-april-2024","dir":"","previous_headings":"","what":"Current status (April 2024)","title":"Import And Process fNIRS Data from COBI Studio in R","text":"package currently early development. Use caution.","code":""},{"path":"https://christopherjwilson.github.io/cobifnirs/index.html","id":"current-features","dir":"","previous_headings":"","what":"Current features","title":"Import And Process fNIRS Data from COBI Studio in R","text":"Importing fNIRS data COBI Studio (.nir) data frame Adding markers data frame COBI Studio markers file (.mrk) Creating summary report signal quality (weak saturated channels) Removing ambient light signal data file Removing selected channels data file (e.g., channels poor signal quality) Creating delta OD (change optical density) values raw light intensity data","code":""},{"path":"https://christopherjwilson.github.io/cobifnirs/index.html","id":"planned-features-in-progress","dir":"","previous_headings":"","what":"Planned features (in progress)","title":"Import And Process fNIRS Data from COBI Studio in R","text":"Converting delta OD values HbO HbR values (.e., oxy data) using modified Beer-Lambert (MBLL) law Adding Brodmann areas data frame based channel locations Plotting data (x = time, y = HbO/HbR values) channel Plotting data (showing activation brain areas) Filtering data using low-pass filter Applying SMAR (.e., sliding window motion artifact rejection) filter data","code":""},{"path":"https://christopherjwilson.github.io/cobifnirs/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Import And Process fNIRS Data from COBI Studio in R","text":"can install development version cobifnirs GitHub","code":"# install.packages(\"devtools\") devtools::install_github(\"christopherjwilson/cobifnirs\")"},{"path":"https://christopherjwilson.github.io/cobifnirs/index.html","id":"importing-nir-files-into-r","dir":"","previous_headings":"","what":"Importing .nir files into R","title":"Import And Process fNIRS Data from COBI Studio in R","text":"","code":"library(cobifnirs)  # Import a single .nir file  nirData <- import_nir(\"path/to/your/data.nir\")  # Import multiple .nir files # path should be the folder where the file is, ending in /  myPath <- \"C:.../fnirs_data/\"  #list all of the nirs files in a directory  nirsFiles <- list.files(pattern = \".nir$\", recursive = TRUE, path = myPath)  # import all of the nirs files   nirsData <- lapply(nirsFiles, import_nirs, folder = myPath)  # base the number of participants on the number of files in the directory # this is useful for later analysis    nparticipants <- length(nirsFiles)   # add a participant id as the name of each dataframe in the data list    names(nirsData) <- c(paste(\"p\",pids, sep = \"\"))  # add the participant id column to each of the dataframes in the data list, # so we can identify each dataset if they are combined later    nirsData <- mapply(`[<-`, nirsData, 'npid', value = pids, SIMPLIFY = FALSE)"},{"path":"https://christopherjwilson.github.io/cobifnirs/index.html","id":"adding-the-markers-to-the-data","dir":"","previous_headings":"","what":"Adding the markers to the data","title":"Import And Process fNIRS Data from COBI Studio in R","text":"Important: markers file must folder .nir file name. See function documentation details use function (re: duplicate markers).","code":"# add markers to a single dataset  nirData <- add_markers(nirData)  # add markers to multiple datasets  nirsData <- lapply(nirsData, add_markers)"},{"path":"https://christopherjwilson.github.io/cobifnirs/index.html","id":"creating-a-summary-report-of-signal-quality","dir":"","previous_headings":"","what":"Creating a summary report of signal quality","title":"Import And Process fNIRS Data from COBI Studio in R","text":"","code":"# create a summary report of signal quality for a single dataset  nirData <- signal_quality(nirData)  # create a summary report of signal quality for multiple datasets and write to a file  signal_summary <- lapply(nirsData, signalSummary, min=1000, max = 4000) signal_summary <- bind_rows(signal_summary, .id = \"PID\") problem_channels <- signal_summary %>% filter(min_max_signal_status != \"ok\") write.csv(problem_channels, \"problem_channels.csv\")"},{"path":"https://christopherjwilson.github.io/cobifnirs/index.html","id":"removing-problem-channels","dir":"","previous_headings":"","what":"Removing problem channels","title":"Import And Process fNIRS Data from COBI Studio in R","text":"","code":"# remove selected channels from a single dataset  nirData <- remove_channels(nirData, channels = c(1, 2, 3))  # remove selected channels from multiple datasets  ## List of problem channels for removal  problem_channels_r <- read_csv(paste0(myPath, \"/problem_channels.csv\"))  problem_channels_r$remove <- if_else(is.na(problem_channels_r$remove), 0, 1)  problem_channels_r$remove <- as.logical(problem_channels_r$remove)  problem_channels_r <- problem_channels_r %>% filter(problem_channels_r$remove == TRUE)   ## remove the channels (after visual inspection too!)  nirsData <- lapply(nirsData, removeChannels, problem_channels_r)"},{"path":"https://christopherjwilson.github.io/cobifnirs/reference/add_markers.html","id":null,"dir":"Reference","previous_headings":"","what":"Add markers to NIRS data — add_markers","title":"Add markers to NIRS data — add_markers","text":"function add markers NIRS data. data must format generated using import_nirs markers must COBI .mrk file exact name location original .nir file. returned data markers added new column. duplicate markers (.e. one marker sent within 500ms window), function either allow duplicates remove , depending parameters set.","code":""},{"path":"https://christopherjwilson.github.io/cobifnirs/reference/add_markers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add markers to NIRS data — add_markers","text":"","code":"add_markers(nirsData, allowDuplicates = FALSE, removeDuplicates = FALSE)"},{"path":"https://christopherjwilson.github.io/cobifnirs/reference/add_markers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add markers to NIRS data — add_markers","text":"nirsData (DATAFRAME) dataframe containing NIRS data long format imported using import_nirs function. allowDuplicates (LOGICAL: optional) TRUE, function allow multiple markers attached data point data. cause extra rows output (see details). Default FALSE. removeDuplicates (LOGICAL: optional) TRUE, function remove duplicate markers attached exact timepoint data, retaining first marker value particular data point. Default FALSE.","code":""},{"path":"https://christopherjwilson.github.io/cobifnirs/reference/add_markers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add markers to NIRS data — add_markers","text":"dataframe markers added new column.","code":""},{"path":"https://christopherjwilson.github.io/cobifnirs/reference/add_markers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add markers to NIRS data — add_markers","text":"function add markers NIRS data. data must format generated using import_nirs markers must COBI .mrk file exact name location original .nir file. returned data markers added new column. markers added NIRS data? real time, markers often sent -data acquisition points. However, COBI marker (.mrk) file specifies data point marker attached using row value, equivalent dataRow value NIRS data generated import_nirs. function add markers NIRS data linking value specified .mrk file dataRow value nirsData. Dealing duplicate markers: found sending markers via serial port connection, possibility sending duplicate markers. happens sent quick succession, faster sampling rate fNIRS data acquisition. result one marker attached data point original .mrk file -  (can see opening .mrk file text editor looking 3rd column duplicate values). Often, duplicates useful. However, also possible markers sent time intentionally, example, marking end trial start next trial. case, may want keep duplicate markers. allowDuplicates removeDuplicates parameters allow choose handle duplicate markers.","code":""},{"path":[]},{"path":"https://christopherjwilson.github.io/cobifnirs/reference/add_markers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add markers to NIRS data — add_markers","text":"","code":"if (FALSE) {   # import the NIRS data   nirsData <- import_nirs(\"path/to/nirs/file.nir\")  # The location of the marker file will be read # from the fileName column of the nirsData dataframe.  nirsData <- add_markers(nirsData)  # Now let's assume there are duplicate values in the marker file. # This could be problematic if it is unintentional. # Equally, it could be completely fine for you if you are aware of this or did it intentionally.  # If you run the function normally, it will return a message # to let you know that there are duplicates.  # We have 2 options: allow the duplicates or remove them. # If we allow them, the output will have extra rows. # These will be exact duplicates of the rows that have the same dataRow value (i.e. the same timepoint) but with the additional markers. # You might want this, and it might cause no issues with your analysis.  # To allow duplicates, set allowDuplicates = TRUE. nirsData <- add_markers(nirsData, allowDuplicates = TRUE)  # If we remove the duplicates, we will retain only the first marker value for that particular datapoint. # This is will mean that only one of the markers will be linked to this exact datapoint. # This might be useful if you are only interested in the first marker that was sent, or if you sent additional markers accidentally. # The output will have the same number of rows as the input.  #To remove duplicates, set removeDuplicates = TRUE.  nirsData <- add_markers(nirsData, removeDuplicates = TRUE)  }"},{"path":"https://christopherjwilson.github.io/cobifnirs/reference/create_delta_ods.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate change in optical density (delta od) from NIRS data — create_delta_ods","title":"Calculate change in optical density (delta od) from NIRS data — create_delta_ods","text":"Calculates change oxygen density (delta od) channel NIRS data, based reference value.","code":""},{"path":"https://christopherjwilson.github.io/cobifnirs/reference/create_delta_ods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate change in optical density (delta od) from NIRS data — create_delta_ods","text":"","code":"create_delta_ods(nirsData, reference = \"baseline\")"},{"path":"https://christopherjwilson.github.io/cobifnirs/reference/create_delta_ods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate change in optical density (delta od) from NIRS data — create_delta_ods","text":"nirsData (DATAFRAME) format output function import_nirs. reference (STRING) specifying reference value use calculating delta od. can either 'baseline' 'mean'. 'baseline', baseline value channel used reference value. 'mean', mean value channel used reference value. Default 'baseline'.","code":""},{"path":"https://christopherjwilson.github.io/cobifnirs/reference/create_delta_ods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate change in optical density (delta od) from NIRS data — create_delta_ods","text":"data frame adds delta od values channel new column.","code":""},{"path":[]},{"path":"https://christopherjwilson.github.io/cobifnirs/reference/create_delta_ods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate change in optical density (delta od) from NIRS data — create_delta_ods","text":"","code":"if (FALSE) { nirsData <- import_nirs(\"path/to/nirs/data.nir\") # Create the delta ODs nirsData <- create_delta_ods(nirsData, reference = \"baseline\") }"},{"path":"https://christopherjwilson.github.io/cobifnirs/reference/import_nirs.html","id":null,"dir":"Reference","previous_headings":"","what":"Import NIRS data — import_nirs","title":"Import NIRS data — import_nirs","text":"function import .nir file, identify baseline values return dataframe NIRS data long format.","code":""},{"path":"https://christopherjwilson.github.io/cobifnirs/reference/import_nirs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import NIRS data — import_nirs","text":"","code":"import_nirs(nirFile, folder = NULL)"},{"path":"https://christopherjwilson.github.io/cobifnirs/reference/import_nirs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import NIRS data — import_nirs","text":"nirFile (STRING) Path .nir file. folder (STRING: optional) Path folder containing .nir file (ending /). specify folder, need include folder path nirFile parameter. can useful multiple files folder, can combined lapply import multiple files (see example).","code":""},{"path":"https://christopherjwilson.github.io/cobifnirs/reference/import_nirs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import NIRS data — import_nirs","text":"dataframe data long format following columns: t: time seconds start recording. see matches values first column COBI Studio .nir file. startTime: start time recording. taken .nir file. fileName: name file (full path) dataRow: row number data original .nir file. first row data first row baseline data ends original .nir file. optode: optode number (e.g., 1-16) freq: frequency (e.g., 730, 850) nirValue: value nir data (light intensity) optode frequency time point. matches values original .nir file. baselineValue: baseline value optode frequency. taken 10 second baseline period start recording, stored original .nir file.","code":""},{"path":"https://christopherjwilson.github.io/cobifnirs/reference/import_nirs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import NIRS data — import_nirs","text":"function import .nir file, identify baseline values return dataframe data long format.","code":""},{"path":"https://christopherjwilson.github.io/cobifnirs/reference/import_nirs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import NIRS data — import_nirs","text":"","code":"if (FALSE) {  # Import a single .nir file  nirsData <- import_nirs(\"path/to/nir/file.nir\")  # Import multiple .nir files  # path should be the folder where the file is, ending in /   myPath <- \"C:.../fnirs_data/\"  #list all of the nirs files in a directory  nirsFiles <- list.files(pattern = \".nir$\", recursive = TRUE, path = myPath)  # import all of the nirs files  nirsData <- lapply(nirsFiles, import_nirs, folder = myPath)  # base the number of participants on the number of files in the directory # this is useful for later analysis  nparticipants <- length(nirsFiles)   # add a participant id as the name of each dataframe in the data list  names(nirsData) <- c(paste(\"p\",pids, sep = \"\"))  # add the participant id column to each of the dataframes in the data list, # so we can identify each dataset if they are combined later  nirsData <- mapply(`[<-`, nirsData, 'npid', value = pids, SIMPLIFY = FALSE)  }"},{"path":"https://christopherjwilson.github.io/cobifnirs/reference/remove_ambient.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove ambient light channel from NIRS data — remove_ambient","title":"Remove ambient light channel from NIRS data — remove_ambient","text":"function remove ambient light channel NIRs data. required , can make data easier work .","code":""},{"path":"https://christopherjwilson.github.io/cobifnirs/reference/remove_ambient.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove ambient light channel from NIRS data — remove_ambient","text":"","code":"remove_ambient(nirsData)"},{"path":"https://christopherjwilson.github.io/cobifnirs/reference/remove_ambient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove ambient light channel from NIRS data — remove_ambient","text":"nirsData (DATAFRAME)  NIRS data imported using import_nirs function.","code":""},{"path":"https://christopherjwilson.github.io/cobifnirs/reference/remove_ambient.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove ambient light channel from NIRS data — remove_ambient","text":"dataframe ambient light channel removed.","code":""},{"path":[]},{"path":"https://christopherjwilson.github.io/cobifnirs/reference/remove_ambient.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove ambient light channel from NIRS data — remove_ambient","text":"","code":"if (FALSE) { nirsData <- import_nirs(\"path/to/nir/file.nir\") nirsData <- remove_ambient(nirsData) }"},{"path":"https://christopherjwilson.github.io/cobifnirs/reference/remove_channels.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove channels from NIRS data — remove_channels","title":"Remove channels from NIRS data — remove_channels","text":"function remove specified channels NIRS data. can useful channels required analysis channels saturated weak, noisy.","code":""},{"path":"https://christopherjwilson.github.io/cobifnirs/reference/remove_channels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove channels from NIRS data — remove_channels","text":"","code":"remove_channels(nirsData, channels)"},{"path":"https://christopherjwilson.github.io/cobifnirs/reference/remove_channels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove channels from NIRS data — remove_channels","text":"nirsData (DATAFRAME) NIRS data imported using import_nirs function. channels (VECTOR) Channel names remove NIRS data. channel names must match names optode column nirs data (.e., 1-16).","code":""},{"path":"https://christopherjwilson.github.io/cobifnirs/reference/remove_channels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove channels from NIRS data — remove_channels","text":"dataframe specified channels removed.","code":""},{"path":[]},{"path":"https://christopherjwilson.github.io/cobifnirs/reference/remove_channels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove channels from NIRS data — remove_channels","text":"","code":"if (FALSE) { nirsData <- import_nirs(\"path/to/nir/file.nir\") problem_channels <- c(\"1\", \"2\", \"3\") nirsData <- remove_channels(nirsData, problem_channels) }"},{"path":"https://christopherjwilson.github.io/cobifnirs/reference/signal_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a summary of the signal data to view weak and saturated channels — signal_summary","title":"Generate a summary of the signal data to view weak and saturated channels — signal_summary","text":"function generate summary signal data view weak saturated channels. output contains optode, status min max signal values, status mean signal value, whether NA values signal data. meant quick way check quality signal data. Can used conjunction visual inspection determine low quality channels.","code":""},{"path":"https://christopherjwilson.github.io/cobifnirs/reference/signal_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a summary of the signal data to view weak and saturated channels — signal_summary","text":"","code":"signal_summary(nirsData, min = 1000, max = 4000)"},{"path":"https://christopherjwilson.github.io/cobifnirs/reference/signal_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a summary of the signal data to view weak and saturated channels — signal_summary","text":"nirsData (DATAFRAME)  NIRS data imported using import_nirs function. min lower value signal data considered \"weak\". Default 1000. max upper value signal data considered \"saturated\". Default 4000.","code":""},{"path":"https://christopherjwilson.github.io/cobifnirs/reference/signal_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a summary of the signal data to view weak and saturated channels — signal_summary","text":"dataframe signal summary.","code":""},{"path":[]},{"path":"https://christopherjwilson.github.io/cobifnirs/reference/signal_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a summary of the signal data to view weak and saturated channels — signal_summary","text":"","code":"if (FALSE) { nirsData <- import_nirs(\"path/to/nir/file.nir\") nirsData <- signal_summary(nirsData) }"}]
